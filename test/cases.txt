# Type

type <Two> = [<Bit>, <Bit>]

==> Program(Source(TypeAlias(TypeName,Type(List(Type(TypeName),Type(TypeName))))))

# Not gate
not(<Bit>) -> <Bit>

==> Program(Source(Declaration(LHS(FunctionName(Identifier),List(Type(TypeName))),List(Type(TypeName)))))

# Not operator
! <Bit> -> <Bit>

==> Program(Source(Declaration(LHS(UnaryOp,Type(TypeName)),List(Type(TypeName)))))

# Not operator, needless parens
! (((<Bit>))) -> <Bit>

==> Program(Source(Declaration(LHS(UnaryOp,Type(Type(Type(Type(TypeName))))),List(Type(TypeName)))))

# Not definition

!X=nand(X,X)

==> Program(Source(Definition(LHS(UnaryOp,Pattern(Identifier)),List(Expression(WeeExpression(Identifier,List(Expression(WeeExpression(Identifier)),Expression(WeeExpression(Identifier)))))),Equations)))

# mux definition
mux(C,X,Y) = Left | Right where

  Left = !C&(X)

  [A, Right] = [zero(), C&Y]

==> Program(Source(Definition(LHS(FunctionName(Identifier),List(Pattern(Identifier),Pattern(Identifier),Pattern(Identifier))),List(Expression(Expression(WeeExpression(Identifier)),Expression(WeeExpression(Identifier)))),Equations(Equation(List(Pattern(Identifier)),Expression(Expression(WeeExpression(WeeExpression(Identifier))),Expression(WeeExpression(Expression(WeeExpression(Identifier)))))),Equation(List(Pattern(List(Pattern(Identifier),Pattern(Identifier)))),Expression(WeeExpression(List(Expression(WeeExpression(Identifier,List)),Expression(Expression(WeeExpression(Identifier)),Expression(WeeExpression(Identifier)))))))))))
